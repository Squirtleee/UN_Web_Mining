# -*- coding: utf-8 -*-
"""UN Mine the Web.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RNIW6v9V-U0cpVYnvu7vIV6Hhty0U-KU

**Program Functions:**

1. Search for the company's recent stock trade data in the United States, Canada, and China
2. Search throughout Reddit for relevant coverage on the company and their view on fighting climate change
3. Search throughout Google for relevant coverage on the company and their view on fighting climate change
4. Present various green tech market forcasts
5. Summarize the user's satsfaciton index with the company's climate change and green tech policies
6. Model the risk associated with this company

**Example Run:**

 For an example run, I recommend trying large automobile companies (Ex. Ford) as the prototype currently mines more data related to the EV industry.

**Acknowledgements:**

1. [Alpha Vantage API](https://www.alphavantage.co/documentation/) for real time stock market data access
2. [Reddit API](https://asyncpraw.readthedocs.io/en/stable/) for reddit data access
3. Statista for market size and value projections
4. yFinance API for Yahoo Finance data access
"""

# Commented out IPython magic to ensure Python compatibility.
import requests

# %pip install asyncpraw
import asyncpraw

import pandas as pd

# %pip install yfinance

import yfinance as yf

import numpy as np
import matplotlib.pyplot as plt

"""# **User Input Company**

Below asks for the specfic company the user hope to analyze today
"""

# welcome and enter companies for search

print("Welcome!")
print("This is an online tool that helps you search through news media, stock market, and Reddit for financial and environmental data related to certain companies")
print('')

company=input("Enter a company you want to search: ")
ticker=input("Enter the stock/ticker symbol of "+company+': ')

company=company.lower()
ticker=ticker.upper()

"""# **Retrieving Recent S&P 500 Index**

Before starting our analysis on the designated company, we will retrieve S&P 500 index data of the past year in order to better understand how the company is performing in regard to the overall market
"""

# retrieve S&P Index
sp500 = yf.Ticker("^GSPC")


# get historical market data of S&P
sp500.history(period="1y")

"""# **Retrieving Recent S&P 500 News**

We will also retrieve Yahoo Finance news related to the S&P 500 Index to help us more comprehensively interpret current market trends
"""

# get S&P500 info from yahoo finance
sp500.news

"""# **NASDAP Stock Data**

Retrieving company specific stock data from NASDAQ
"""

# retrieve stock market data

stockurl='https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol='+ticker+ '&interval=30min&apikey=NEW257U83HKBRB64'
r = requests.get(stockurl)
stockData = r.json()

print("Below are the stock market data of",ticker,"traded in the United States (time interval: weekly)\n")

stockData=stockData['Weekly Time Series']
stockData2=[]
cnt=0
for time in stockData:
  print(time, stockData[time])
  cnt+=1
  if cnt==50:
    break

"""# **Toronto Stock Exchange Data**

Retrieving company specific stock data from Toronto Stock Exchange
"""

toronto=input("Would you like to view the stock trade data of "+ticker+" in Canada - Toronto Stock Exchange? \nType 'Y' for Yes and 'N' for no. " )
if toronto=='Y':
  ticker2=ticker.upper()
  ticker2+='.TRT'
  stockurl='https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol='+ticker+'&outputsize=compact&apikey=NEW257U83HKBRB64'
  r = requests.get(stockurl)
  stockData = r.json()


  print('')
  print("Below are the stock market data of",ticker,"traded in Canada - Toronto Stock Exchange (time interval: weekly)\n")

  print(stockData)

  stockData=stockData['Weekly Time Series']
  stockData2=[]
  cnt=0
  for time in stockData:
    print(time, stockData[time])
    cnt+=1
    if cnt==50:
      break

"""# **Shanghai Stock Exchange Data**

Retrieving company specific stock data from Shanghai Stock Exchange
"""

china=input("Would you like to view the stock trade data of "+ticker+" in China - Shanghai Stock Exchange? \nType 'Y' for Yes and 'N' for no. " )
if china=='Y':
  ticker3=ticker.upper()
  ticker3+='.SHH'
  stockurl='https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol='+ticker+'&outputsize=compact&apikey=NEW257U83HKBRB64'
  r = requests.get(stockurl)
  stockData = r.json()


  print('')
  print("Below are the stock market data of",ticker,"traded in China - Shanghai Stock Exchange (time interval: weekly)\n")

  stockData=stockData['Weekly Time Series']
  stockData2=[]
  cnt=0
  for time in stockData:
    print(time, stockData[time])
    cnt+=1
    if cnt==50:
      break

"""# **Retrieving Financial News Related to the Input Company**

Retrieving finance news related to the company ticker from Yahoo Finance
"""

curStock=yf.Ticker(ticker)

curStock.news

"""# **Searching Reddit, subreddit: RenewableEnergy**

Searching Reddit (subreddit: RenewableEnergy) for posts mentioning the input company
"""

print("Now let's look at the company's opinions on green technologies!")
print("We will now search through Reddit and Google to understand the company's investments in regards to fighting climate change")
print('')
print("Searching Reddit (subreddit: RenewableEnergy) ...")
print('')

reddit=asyncpraw.Reddit(client_id='XD9n2HLMFhywl4RzyYf28Q',
                  client_secret='', # deleted for profile privacy
                  username='BwayRushBot',
                  password='', # deleted for profile privacy
                  user_agent='BwayBot1.0')


##########################
# some variables
post_limit=200
subreddit = await reddit.subreddit("RenewableEnergy")
##########################

reEnergy=set()
keyword1=company.lower()
keyword2=ticker.lower()

# look at titles
async for post in subreddit.hot(limit=post_limit):
        filter=False
        title=post.title.lower()
        if keyword1 in title or keyword2 in title:
          reEnergy.add((title,post.url))



# look at post contents
async for post in subreddit.hot(limit=post_limit):
        filter=False
        title=post.selftext.lower()
        if keyword1 in title or keyword2 in title:
          reEnergy.add((title[0:min(len(title),200)],post.url))

for r in reEnergy:
  print(r)

if len(reEnergy)==0:
  print('No relevant data found')

"""# **Searching Reddit, subreddit: climatechange**

Searching Reddit (subreddit: climatechange) for posts mentioning the input company
"""

print("Searching Reddit (subreddit: climatechange) ...")
print('')

##########################
# some variables
post_limit=200
subreddit = await reddit.subreddit("climatechange")
##########################

reEnergy=set()
keyword1=company.lower()
keyword2=ticker.lower()

# look at titles
async for post in subreddit.hot(limit=post_limit):
        filter=False
        title=post.title.lower()
        if keyword1 in title or keyword2 in title:
          reEnergy.add((title,post.url))



# look at post contents
async for post in subreddit.hot(limit=post_limit):
        filter=False
        title=post.selftext.lower()
        if keyword1 in title or keyword2 in title:
          reEnergy.add((title[0:min(len(title),200)],post.url))

print('')
for r in reEnergy:
  print(r)

if len(reEnergy)==0:
  print('No relevant data found')

"""# **Searching Reddit, subreddit: electricvehicles**

Searching Reddit (subreddit: electricvehicles) for posts mentioning the input company
"""

# electricvehicles

print("Searching Reddit (subreddit: electricvehicles) ...")
print('')

##########################
# some variables
post_limit=200
subreddit = await reddit.subreddit("electricvehicles")
##########################

ev=set()
keyword1=company.lower()
keyword2=ticker.lower()

# look at titles
async for post in subreddit.hot(limit=post_limit):
        filter=False
        title=post.title.lower()
        if keyword1 in title or keyword2 in title:
          ev.add((title,post.url))



# look at post contents
async for post in subreddit.hot(limit=post_limit):
        filter=False
        title=post.selftext.lower()
        if keyword1 in title or keyword2 in title:
          ev.add((title[0:min(len(title),200)],post.url))

print('')
for r in ev:
  print(r)

if len(ev)==0:
  print('No relevant data found')

"""# **Searching Google**

Searching Google using the company's name with "climate change" and "green tech" as keywords
"""

print("Searching Google ...")
print('Here are the results!')

"""**Search Google**

The Google API is quite challenging to set up in a virtual and asynchronous environment like Google Colab, so we will not actually code it out here.
The main idea is that with a Google search API, the program will search Google for green tech and climate change news related to the company and present the results. Below are the pseudocodes for when we do actually implement a Google API and search query.



```
params = {
  "engine": "google",
  "q": company_name + "Climate Change and Green Tech",
  "api_key": "345548fe2e24d793e8c97f333b6f2b9000b0b93abc1cdbde0c102d5a7e6c5fb8"
}

search = GoogleSearch(params)
results = search.get_dict()

```

# **Compare Gathered Data to Market Forcasts**

After gathering company related data through web mining, we can now turn to our market trend database to decide whether these companies would be heavily impacted by climate change and its related environmental and technology change.
I have built a sample [database](https://dd0a6af9-1fcd-40e1-bd83-be447d639495-00-3nhkcqrg2s46d.kirk.replit.dev/) with some forcast regarding future market trends related to climate change

# **Company Rating, General Market Trend**

Capturing the user's confidence and emphasis towards the company's performance in certain sustainability market trends
"""

s1=int(input('With a score of 0-100, how well do you believe '+company+' will perform in the carbon capture and storage market? '))
w1=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the carbon capture and storage market? "))

s2=int(input('With a score of 0-100, how well do you believe '+company+' will perform in the methane hydrate market? '))
w2=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the methane hydrate market? "))

s3=int(input('With a score of 0-100, how well do you believe '+company+' will perform in the hydropower market? '))
w3=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the hydropower market? "))

s4=int(input('With a score of 0-100, how well do you believe '+company+' will perform in the Electric Vehicle market? '))
w4=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the Electric Vehicle market? "))

"""# **Company Rating, Covariating Market Trends**

Capturing the user's confidence and emphasis towards the company's performance related to the covariance of sustainability market trends
"""

s5=int(input('With a score of 0-100, how well do you believe '+company+' will sustain if the EV and lithium markets both face adversity? '))
w5=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the covariating EV and lithium markets? "))

s6=int(input('With a score of 0-100, how well do you believe '+company+' will sustain if the solar batteries and rare earth resources markets both face adversity? '))
w6=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the covariating solar batteries and rare earth resources markets? "))

s7=int(input('With a score of 0-100, how well do you believe '+company+' will sustain if the geologic carbon sequestration and oil price markets both face adversity? '))
w7=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the covariating geologic carbon sequestration and oil price markets? "))

s8=int(input('With a score of 0-100, how well do you believe '+company+' will sustain if the Northeast Passage and Arctic fishing markets both face adversity? '))
w8=int(input('With a weight of 0-100, how much do you value '+company+"'s performance in the covariating Northeast Passage and Arctic fishing markets? "))

"""# **Data Summary**

Summarizing data, calculating unweighted and weighted scores


"""

uw1=(s1+s2+s3+s4)//4
uw2=(s5+s6+s7+s8)//4
weighted1=(s1*w1+s2*w2+s3*w3+s4*w4)//(w1+w2+w3+w4)
weighted2=(s5*w5+s6*w6+s7*w7+s8*w8)//(w5+w6+w7+w8)

print('General trend wise, you gave', company, 'an unweighted score of',uw1, 'and a weighted score of', weighted1)
print('Covariation wise, you believe', company, 'has an unweighted score of',uw2, 'and a weighted score of',weighted2,'to sustain during covariating market adversity')

"""# **Data Visualization, General Market Trends**

Plotting data (general market trends)
"""

# set up the figure


fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_xlim(0,10)
ax.set_ylim(0,10)

# draw lines
xmin = 0
xmax = 10
y = 5

height = 1

plt.hlines(y, xmin, xmax)
plt.vlines(xmin, y - height / 2., y + height / 2.)
plt.vlines(xmax, y - height / 2., y + height / 2.)

# draw a point on the line
px = uw1/10
plt.plot(px,y, 'ro', ms = 15, mfc = 'r')
px2=weighted1/10
plt.plot(px2,y, 'ro', ms = 15, mfc = 'r')

# add an arrow
plt.annotate('unweighted, general trend', (px,y), xytext = (px - 1, y + 1),
              arrowprops=dict(facecolor='black', shrink=0.1),
              horizontalalignment='right')
plt.annotate('weighted, general trend', (px2,y), xytext = (px2 - 1, y - 1),
              arrowprops=dict(facecolor='black', shrink=0.1),
              horizontalalignment='right')

# add numbers
plt.text(xmin - 0.1, y, '0', horizontalalignment='right')
plt.text(xmax + 0.1, y, '100', horizontalalignment='left')

plt.axis('off')

"""# **Data Visualization, Covariating Market Trends**

Plotting data (market covariance)
"""

fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_xlim(0,10)
ax.set_ylim(0,10)

# draw lines
xmin = 0
xmax = 10
y = 5
height = 1

plt.hlines(y, xmin, xmax)
plt.vlines(xmin, y - height / 2., y + height / 2.)
plt.vlines(xmax, y - height / 2., y + height / 2.)

# draw a point on the line
px = uw2/10
px2=weighted2/10
plt.plot(px,y, 'ro', ms = 15, mfc = 'r')
plt.plot(px2,y, 'ro', ms = 15, mfc = 'r')

# add an arrow
plt.annotate('unweighted, market covariance', (px,y), xytext = (px - 1, y + 1),
              arrowprops=dict(facecolor='black', shrink=0.1),
              horizontalalignment='right')
plt.annotate('weighted, market covariance', (px2,y), xytext = (px - 1, y - 1),
              arrowprops=dict(facecolor='black', shrink=0.1),
              horizontalalignment='right')

# add numbers
plt.text(xmin - 0.1, y, '0', horizontalalignment='right')
plt.text(xmax + 0.1, y, '100', horizontalalignment='left')

plt.axis('off')